{"version":3,"sources":["webpack:///src/app/users/add-edit.component.ts","webpack:///src/app/users/add-edit.component.html","webpack:///src/app/users/layout.component.ts","webpack:///src/app/users/layout.component.html","webpack:///src/app/users/list.component.ts","webpack:///src/app/users/list.component.html","webpack:///src/app/users/users-routing.module.ts","webpack:///src/app/users/users.module.ts"],"names":["AddEditComponent","formBuilder","route","router","accountService","alertService","loading","submitted","id","snapshot","params","isAddMode","passwordValidators","minLength","push","required","form","group","firstName","lastName","username","password","accountType","initialDepositAmount","branchName","country","email","contact","state","refAccountholderAccountNumber","gender","maritalStatus","idProofType","idDocNumber","getById","pipe","subscribe","x","patchValue","clear","invalid","createUser","updateUser","register","value","next","success","keepAfterRouteChange","navigate","relativeTo","error","console","log","update","controls","onSubmit","templateUrl","LayoutComponent","ListComponent","users","getAll","filter","currentUser","user","find","isDeleting","routes","path","component","children","UsersRoutingModule","forChild","imports","exports","UsersModule","declarations"],"mappings":"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","file":"users-users-module-es5.js","sourcesContent":["import { Component, OnInit } from '@angular/core';\r\nimport { Router, ActivatedRoute } from '@angular/router';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { first } from 'rxjs/operators';\r\n\r\nimport { AccountService, AlertService } from '@app/_services';\r\n\r\n@Component({ templateUrl: 'add-edit.component.html' })\r\nexport class AddEditComponent implements OnInit {\r\n    form: FormGroup;\r\n    id: string;\r\n    isAddMode: boolean;\r\n    loading = false;\r\n    submitted = false;\r\n\r\n    constructor(\r\n        private formBuilder: FormBuilder,\r\n        private route: ActivatedRoute,\r\n        private router: Router,\r\n        private accountService: AccountService,\r\n        private alertService: AlertService\r\n    ) {}\r\n\r\n    ngOnInit() {\r\n        this.id = this.route.snapshot.params['id'];\r\n        this.isAddMode = !this.id;\r\n        \r\n        // password not required in edit mode\r\n        const passwordValidators = [Validators.minLength(6)];\r\n        if (this.isAddMode) {\r\n            passwordValidators.push(Validators.required);\r\n        }\r\n\r\n        this.form = this.formBuilder.group({\r\n            firstName: ['', Validators.required],\r\n            lastName: ['', Validators.required],\r\n            username: ['', Validators.required],\r\n            password: ['', passwordValidators],\r\n\r\n            accountType: ['', Validators.required],\r\n            initialDepositAmount: ['', Validators.required],\r\n           \r\n            branchName: ['', Validators.required],\r\n            country: ['', Validators.required],\r\n            \r\n            email: ['', Validators.required],\r\n            contact: ['', Validators.required],\r\n\r\n            state: ['', Validators.required],\r\n            refAccountholderAccountNumber: ['', Validators.required],\r\n\r\n            gender: ['', Validators.required],\r\n            maritalStatus: ['', Validators.required],\r\n           \r\n            \r\n            idProofType: ['', Validators.required],\r\n            idDocNumber: ['', Validators.required],\r\n            \r\n        });\r\n\r\n        if (!this.isAddMode) {\r\n            this.accountService.getById(this.id)\r\n                .pipe(first())\r\n                .subscribe(x => this.form.patchValue(x));\r\n        }\r\n    }\r\n\r\n    // convenience getter for easy access to form fields\r\n    get f() { return this.form.controls; }\r\n\r\n    onSubmit() {\r\n        this.submitted = true;\r\n\r\n        // reset alerts on submit\r\n        this.alertService.clear();\r\n\r\n        // stop here if form is invalid\r\n        if (this.form.invalid) {\r\n            return;\r\n        }\r\n\r\n        this.loading = true;\r\n        if (this.isAddMode) {\r\n            this.createUser();\r\n        } else {\r\n            this.updateUser();\r\n        }\r\n    }\r\n\r\n    private createUser() {\r\n        this.accountService.register(this.form.value)\r\n            .pipe(first())\r\n            .subscribe({\r\n                next: () => {\r\n                    this.alertService.success('User added successfully', { keepAfterRouteChange: true });\r\n                    this.router.navigate(['../'], { relativeTo: this.route });\r\n                },\r\n                error: error => {\r\n                    this.alertService.error(error);\r\n                    this.loading = false;\r\n                }\r\n            });\r\n    }\r\n\r\n    private updateUser() {\r\n        console.log(this.form.value);\r\n        this.accountService.update(this.id, this.form.value)\r\n            .pipe(first())\r\n            .subscribe({\r\n                next: () => {\r\n                    this.alertService.success('Update successful', { keepAfterRouteChange: true });\r\n                    this.router.navigate(['../../'], { relativeTo: this.route });\r\n                },\r\n                error: error => {\r\n                    this.alertService.error(error);\r\n                    this.loading = false;\r\n                }\r\n            });\r\n    }\r\n}","<h1 *ngIf=\"isAddMode\">Add User</h1>\r\n<h1 *ngIf=\"!isAddMode\">Edit User</h1>\r\n<form [formGroup]=\"form\" (ngSubmit)=\"onSubmit()\">\r\n    <div class=\"form-row\">\r\n        <div class=\"form-group col\">\r\n            <label for=\"firstName\">First Name</label>\r\n            <input type=\"text\" formControlName=\"firstName\" class=\"form-control\" [ngClass]=\"{ 'is-invalid': submitted && f.firstName.errors }\" />\r\n            <div *ngIf=\"submitted && f.firstName.errors\" class=\"invalid-feedback\">\r\n                <div *ngIf=\"f.firstName.errors.required\">First Name is required</div>\r\n            </div>\r\n        </div>\r\n        <div class=\"form-group col\">\r\n            <label for=\"lastName\">Last Name</label>\r\n            <input type=\"text\" formControlName=\"lastName\" class=\"form-control\" [ngClass]=\"{ 'is-invalid': submitted && f.lastName.errors }\" />\r\n            <div *ngIf=\"submitted && f.lastName.errors\" class=\"invalid-feedback\">\r\n                <div *ngIf=\"f.lastName.errors.required\">Last Name is required</div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n    <div class=\"form-row\">\r\n        <div class=\"form-group col\">\r\n            <label for=\"username\">Username</label>\r\n            <input type=\"text\" formControlName=\"username\" class=\"form-control\" [ngClass]=\"{ 'is-invalid': submitted && f.username.errors }\" />\r\n            <div *ngIf=\"submitted && f.username.errors\" class=\"invalid-feedback\">\r\n                <div *ngIf=\"f.username.errors.required\">Username is required</div>\r\n            </div>\r\n        </div>\r\n        <div class=\"form-group col\">\r\n            <label for=\"password\">\r\n                Password\r\n                <em *ngIf=\"!isAddMode\">(Leave blank to keep the same password)</em>\r\n            </label>\r\n            <input type=\"password\" formControlName=\"password\" class=\"form-control\" [ngClass]=\"{ 'is-invalid': submitted && f.password.errors }\" />\r\n            <div *ngIf=\"submitted && f.password.errors\" class=\"invalid-feedback\">\r\n                <div *ngIf=\"f.password.errors.required\">Password is required</div>\r\n                <div *ngIf=\"f.password.errors.minlength\">Password must be at least 6 characters</div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n    <div class=\"form-row\">\r\n        <div class=\"form-group col\">\r\n            <label for=\"accountType\">Account Type</label>\r\n            <input type=\"text\" formControlName=\"accountType\" class=\"form-control\" [ngClass]=\"{ 'is-invalid': submitted && f.accountType.errors }\" />\r\n            <div *ngIf=\"submitted && f.accountType.errors\" class=\"invalid-feedback\">\r\n                <div *ngIf=\"f.accountType.errors.required\">Account Type is required</div>\r\n            </div>\r\n        </div>\r\n        <div class=\"form-group col\">\r\n            <label for=\"initialDepositAmount\">Initial Deposit Amount</label>\r\n            <input type=\"initialDepositAmount\" formControlName=\"initialDepositAmount\" class=\"form-control\" [ngClass]=\"{ 'is-invalid': submitted && f.initialDepositAmount.errors }\" />\r\n            <div *ngIf=\"submitted && f.initialDepositAmount.errors\" class=\"invalid-feedback\">\r\n                <div *ngIf=\"f.initialDepositAmount.errors.required\">Initial Deposit Amount is required</div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n    <div class=\"form-row\">\r\n        <div class=\"form-group col\">\r\n            <label for=\"branchName\">Branch Name</label>\r\n            <input type=\"text\" formControlName=\"branchName\" class=\"form-control\" [ngClass]=\"{ 'is-invalid': submitted && f.branchName.errors }\" />\r\n            <div *ngIf=\"submitted && f.branchName.errors\" class=\"invalid-feedback\">\r\n                <div *ngIf=\"f.branchName.errors.required\">Branch Name  is required</div>\r\n            </div>\r\n        </div>\r\n        <div class=\"form-group col\">\r\n            <label for=\"country\">Country</label>\r\n            <input type=\"country\" formControlName=\"country\" class=\"form-control\" [ngClass]=\"{ 'is-invalid': submitted && f.country.errors }\" />\r\n            <div *ngIf=\"submitted && f.country.errors\" class=\"invalid-feedback\">\r\n                <div *ngIf=\"f.country.errors.required\">Country is required</div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n    <div class=\"form-row\">\r\n        <div class=\"form-group col\">\r\n            <label for=\"gender\">Gender</label>\r\n            <input type=\"text\" formControlName=\"gender\" class=\"form-control\" [ngClass]=\"{ 'is-invalid': submitted && f.gender.errors }\" />\r\n            <div *ngIf=\"submitted && f.gender.errors\" class=\"invalid-feedback\">\r\n                <div *ngIf=\"f.gender.errors.required\">Gender  is required</div>\r\n            </div>\r\n        </div>\r\n        <div class=\"form-group col\">\r\n            <label for=\"maritalStatus\">Marital Status</label>\r\n            <input type=\"maritalStatus\" formControlName=\"maritalStatus\" class=\"form-control\" [ngClass]=\"{ 'is-invalid': submitted && f.maritalStatus.errors }\" />\r\n            <div *ngIf=\"submitted && f.maritalStatus.errors\" class=\"invalid-feedback\">\r\n                <div *ngIf=\"f.maritalStatus.errors.required\">Marital Status is required</div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n    <div class=\"form-row\">\r\n        <div class=\"form-group col\">\r\n            <label for=\"email\">Email</label>\r\n            <input type=\"text\" formControlName=\"email\" class=\"form-control\" [ngClass]=\"{ 'is-invalid': submitted && f.email.errors }\" />\r\n            <div *ngIf=\"submitted && f.email.errors\" class=\"invalid-feedback\">\r\n                <div *ngIf=\"f.email.errors.required\">email  is required</div>\r\n            </div>\r\n        </div>\r\n        <div class=\"form-group col\">\r\n            <label for=\"contact\">Contact</label>\r\n            <input type=\"contact\" formControlName=\"contact\" class=\"form-control\" [ngClass]=\"{ 'is-invalid': submitted && f.contact.errors }\" />\r\n            <div *ngIf=\"submitted && f.contact.errors\" class=\"invalid-feedback\">\r\n                <div *ngIf=\"f.contact.errors.required\">contact is required</div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n    <div class=\"form-row\">\r\n        <div class=\"form-group col\">\r\n            <label for=\"state\">State</label>\r\n            <input type=\"text\" formControlName=\"state\" class=\"form-control\" [ngClass]=\"{ 'is-invalid': submitted && f.state.errors }\" />\r\n            <div *ngIf=\"submitted && f.state.errors\" class=\"invalid-feedback\">\r\n                <div *ngIf=\"f.state.errors.required\">State  is required</div>\r\n            </div>\r\n        </div>\r\n        <div class=\"form-group col\">\r\n            <label for=\"refAccountholderAccountNumber\">Reference Accountholder AccountNumber</label>\r\n            <input type=\"refAccountholderAccountNumber\" formControlName=\"refAccountholderAccountNumber\" class=\"form-control\" [ngClass]=\"{ 'is-invalid': submitted && f.refAccountholderAccountNumber.errors }\" />\r\n            <div *ngIf=\"submitted && f.refAccountholderAccountNumber.errors\" class=\"invalid-feedback\">\r\n                <div *ngIf=\"f.refAccountholderAccountNumber.errors.required\">Reference A/C no. is required</div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n    <div class=\"form-row\">\r\n        <div class=\"form-group col\">\r\n            <label for=\"idProofType\">Id ProofType</label>\r\n            <input type=\"text\" formControlName=\"idProofType\" class=\"form-control\" [ngClass]=\"{ 'is-invalid': submitted && f.idProofType.errors }\" />\r\n            <div *ngIf=\"submitted && f.idProofType.errors\" class=\"invalid-feedback\">\r\n                <div *ngIf=\"f.idProofType.errors.required\">Id Proof Type  is required</div>\r\n            </div>\r\n        </div>\r\n        <div class=\"form-group col\">\r\n            <label for=\"idDocNumber\">id Doc Number</label>\r\n            <input type=\"idDocNumber\" formControlName=\"idDocNumber\" class=\"form-control\" [ngClass]=\"{ 'is-invalid': submitted && f.idDocNumber.errors }\" />\r\n            <div *ngIf=\"submitted && f.idDocNumber.errors\" class=\"invalid-feedback\">\r\n                <div *ngIf=\"f.idDocNumber.errors.required\">Id Number is required</div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n    <div class=\"form-group\">\r\n        <button [disabled]=\"loading\" class=\"btn btn-primary\">\r\n            <span *ngIf=\"loading\" class=\"spinner-border spinner-border-sm mr-1\"></span>\r\n            Save\r\n        </button>\r\n        <a routerLink=\"/users\" class=\"btn btn-link\">Cancel</a>\r\n    </div>\r\n</form>","import { Component } from '@angular/core';\r\n\r\n@Component({ templateUrl: 'layout.component.html' })\r\nexport class LayoutComponent { }","<div class=\"p-4\">\r\n    <div class=\"container\">\r\n        <router-outlet></router-outlet>\r\n    </div>\r\n</div>","import { Component, OnInit } from '@angular/core';\r\nimport { first } from 'rxjs/operators';\r\n\r\nimport { AccountService } from '@app/_services';\r\n\r\n@Component({ templateUrl: 'list.component.html' })\r\nexport class ListComponent implements OnInit {\r\n    users = null;\r\n\r\n    constructor(private accountService: AccountService) {}\r\n\r\n    ngOnInit() {\r\n        this.accountService.getAll()\r\n            .pipe(first())\r\n            .subscribe(users => this.users = users.filter(x => x.username === this.accountService.currentUser.username));\r\n    }\r\n\r\n    deleteUser(id: string) {\r\n        const user = this.users.find(x => x.id === id);\r\n        user.isDeleting = true;\r\n        this.accountService.delete(id)\r\n            .pipe(first())\r\n            .subscribe(() => this.users = this.users.filter(x => x.id !== id));\r\n    }\r\n}","<h1>Manage Profile</h1>\r\n<!-- <a routerLink=\"add\" class=\"btn btn-sm btn-success mb-2\">Add User</a> -->\r\n<table class=\"table table-striped\">\r\n    <thead>\r\n        <tr>\r\n            <th style=\"width: 30%\">First Name</th>\r\n            <th style=\"width: 30%\">Last Name</th>\r\n            <th style=\"width: 30%\">Username</th>\r\n            <th style=\"width: 10%\"></th>\r\n        </tr>\r\n    </thead>\r\n    <tbody>\r\n        <tr *ngFor=\"let user of users\">\r\n            <td>{{user.firstName}}</td>\r\n            <td>{{user.lastName}}</td>\r\n            <td>{{user.username}}</td>\r\n            <td style=\"white-space: nowrap\">\r\n                <a routerLink=\"edit/{{user.id}}\" class=\"btn btn-sm btn-primary mr-1\">Edit</a>\r\n                <button (click)=\"deleteUser(user.id)\" class=\"btn btn-sm btn-danger btn-delete-user\" [disabled]=\"user.isDeleting\">\r\n                    <span *ngIf=\"user.isDeleting\" class=\"spinner-border spinner-border-sm\"></span>\r\n                    <span *ngIf=\"!user.isDeleting\">Delete</span>\r\n                </button>\r\n            </td>\r\n        </tr>\r\n        <tr *ngIf=\"!users\">\r\n            <td colspan=\"4\" class=\"text-center\">\r\n                <span class=\"spinner-border spinner-border-lg align-center\"></span>\r\n            </td>\r\n        </tr>\r\n    </tbody>\r\n</table>","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\n\r\nimport { LayoutComponent } from './layout.component';\r\nimport { ListComponent } from './list.component';\r\nimport { AddEditComponent } from './add-edit.component';\r\n\r\nconst routes: Routes = [\r\n    {\r\n        path: '', component: LayoutComponent,\r\n        children: [\r\n            { path: '', component: ListComponent },\r\n            { path: 'add', component: AddEditComponent },\r\n            { path: 'edit/:id', component: AddEditComponent }\r\n        ]\r\n    }\r\n];\r\n\r\n@NgModule({\r\n    imports: [RouterModule.forChild(routes)],\r\n    exports: [RouterModule]\r\n})\r\nexport class UsersRoutingModule { }","import { NgModule } from '@angular/core';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { UsersRoutingModule } from './users-routing.module';\r\nimport { LayoutComponent } from './layout.component';\r\nimport { ListComponent } from './list.component';\r\nimport { AddEditComponent } from './add-edit.component';\r\n\r\n@NgModule({\r\n    imports: [\r\n        CommonModule,\r\n        ReactiveFormsModule,\r\n        UsersRoutingModule\r\n    ],\r\n    declarations: [\r\n        LayoutComponent,\r\n        ListComponent,\r\n        AddEditComponent\r\n    ]\r\n})\r\nexport class UsersModule { }"]}